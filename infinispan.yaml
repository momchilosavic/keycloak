apiVersion: v1
kind: Service
metadata:
  name: infinispan
  namespace: tests
  labels:
    app: infinispan
spec:
  ports:
    - name: infinispan
      protocol: TCP
      port: 11222
      targetPort: 11222
  selector:
    app: infinispan
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infinispan
  namespace: tests
  labels:
    app: infinispan
spec:
  replicas: 1
  selector:
    matchLabels:
      app: infinispan
  template:
    metadata:
      labels:
        app: infinispan
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: infinispan
          image: infinispan/server:14.0
          args: 
            - --server-config=/infinispan/infinispan-cache.xml
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", ". /scripts/create-user.sh"]
          ports:
          - name: infinispan
            containerPort: 11222
          readinessProbe:
            httpGet:
              path: /rest/v2/cache-managers/remoteKeycloak/health/status
              port: 11222
            failureThreshold: 5
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /rest/v2/cache-managers/remoteKeycloak/health/status
              port: 11222
            failureThreshold: 10
            periodSeconds: 30
          env:
          - name: USER
            value: infinispan
          - name: PASS
            value: infinispan
          volumeMounts:
            - mountPath: /infinispan/infinispan-cache.xml
              subPath: infinispan-cache.xml
              name: infinispan-cache
              readOnly: true
            - mountPath: "/opt/infinispan/server/data"
              name: infinispan
            - mountPath: "/scripts"
              name: create-user
      volumes:
        - name: infinispan-cache
          configMap:
            name: infinispan-cache
            items:
              - key: infinispan-cache.xml
                path: infinispan-cache.xml
        - name: create-user
          configMap:
            name: create-user
        - name: infinispan
          persistentVolumeClaim:
            claimName: infinispan
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: infinispan
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/infinispan"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: infinispan
  namespace: tests
spec:
  storageClassName: manual
  volumeName: infinispan
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: create-user
  namespace: tests
data:
  create-user.sh: |
    #!/bin/bash
    url="http://localhost:11222/rest/v2/cache-managers/remoteKeycloak/health/status"
    max_attempts=10
    attempt=1
    while true; do
        response=$(curl -s -o /dev/null -2 -w "%{http_code}" $url)
        if [ "$response" = "200" ]; then
            echo "200"
            echo "creating user..."
            bin/cli.sh user create keycloak -p keycloak -g application
            echo "done"
            cat server/conf/users.properties
            cat server/conf/groups.properties
            exit 0
        else
            echo "Attempt $attempt - $response"
            if [ $attempt -eq $max_attempts ]; then
                echo "Maximum number of atteempts reached"
                exit 1
            fi
            attempt=$((attempt+1))
            sleep 6
        fi
    done
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: infinispan-cache
  namespace: tests
data:
  infinispan-cache.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <infinispan
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="urn:infinispan:config:14.0 https://infinispan.org/schemas/infinispan-config-14.0.xsd
                                urn:infinispan:server:14.0 https://infinispan.org/schemas/infinispan-server-14.0.xsd"
            xmlns="urn:infinispan:config:14.0"
            xmlns:server="urn:infinispan:server:14.0">
        
        <cache-container name="remoteKeycloak" statistics="true">
            <transport cluster="${infinispan.cluster.name:ISPN}"
                stack="${infinispan.cluster.stack:udp}" node-name="${infinispan.node.name:mainNode}"
                site="site1" />
                
            <security>
                <authorization />
            </security>
            
            <serialization marshaller="org.infinispan.jboss.marshalling.commons.GenericJBossMarshaller">
                <allow-list>
                    <class>org.*</class>
                    <regex>.*</regex>
                </allow-list>
            </serialization>
            
            <distributed-cache name="sessions">
                <encoding media-type="application/x-jboss-marshalling" />
            </distributed-cache>
        </cache-container>
        
        <server xmlns="urn:infinispan:server:14.0">
            <interfaces>
                <interface name="public">
                    <inet-address value="${infinispan.bind.address:127.0.0.1}" />
                </interface>
            </interfaces>
            
            <socket-bindings default-interface="public"
                port-offset="${infinispan.socket.binding.port-offset:0}">
                <socket-binding name="default"
                    port="${infinispan.bind.port:11222}" />
                <socket-binding name="memcached"
                    port="11221" />
            </socket-bindings>
            
            <security>
                <credential-stores>
                    <credential-store name="credentials" path="credentials.pfx">
                        <clear-text-credential clear-text="secret" />
                    </credential-store>
                </credential-stores>
                <security-realms>
                    <security-realm name="default">
                        <properties-realm groups-attribute="Roles">
                            <user-properties path="users.properties" />
                            <group-properties path="groups.properties" />
                        </properties-realm>
                    </security-realm>
                </security-realms>
            </security>
            
            <endpoints socket-binding="default" security-realm="default">
                <endpoint>
                    <hotrod-connector name="hotrod">
                        <authentication>
                            <sasl mechanisms="DIGEST-MD5"
                                server-name="infinispan" />
                        </authentication>
                    </hotrod-connector>
                    <rest-connector name="rest" />
                </endpoint>
            </endpoints>
        </server>
        
    </infinispan>
